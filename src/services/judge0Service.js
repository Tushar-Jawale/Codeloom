
"use client";
const DEFAULT_API_URL = "http://localhost:2358/submissions";
const DEFAULT_CPU_TIME_LIMIT = 5;
const DEFAULT_MEMORY_LIMIT = 128000;
/**
 
  @param {Object} requestData 
  @param {string} requestData.language 
  @param {Array} requestData.files 
  @param {string} requestData.stdin 
  @returns {Promise<Object>}
 */
export async function compileCode(requestData) {

  const endpoint = (typeof process !== 'undefined' && process.env && process.env.NEXT_PUBLIC_JUDGE0_API_URL) || DEFAULT_API_URL;
  
  const judge0Request = {
    source_code: requestData.files[0].content,
    language_id: getLanguageId(requestData.language),
    stdin: requestData.stdin || "",
    
    expected_output: requestData.expectedOutput || null,
    cpu_time_limit: requestData.cpuTimeLimit || 
      (typeof process !== 'undefined' && process.env && process.env.NEXT_PUBLIC_CPU_TIME_LIMIT ? 
        Number(process.env.NEXT_PUBLIC_CPU_TIME_LIMIT) : DEFAULT_CPU_TIME_LIMIT),
    memory_limit: requestData.memoryLimit || 
      (typeof process !== 'undefined' && process.env && process.env.NEXT_PUBLIC_MEMORY_LIMIT ? 
        Number(process.env.NEXT_PUBLIC_MEMORY_LIMIT) : DEFAULT_MEMORY_LIMIT)
  };

  try {
  
    const createResponse = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(judge0Request),
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      console.error("Judge0 API Error:", errorText);
      
      if (errorText.includes("size limit") || createResponse.status === 413) {
        return {
          error: "File size limit exceeded. Your code or input is too large for the Judge0 service."
        };
      }
      
      throw new Error(`HTTP error! status: ${createResponse.status}`);
    }

    const createData = await createResponse.json();
    const token = createData.token;
    
    let result;
    let status = "Processing";
    
    while (["Processing", "In Queue"].includes(status)) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const resultResponse = await fetch(`${endpoint}/${token}?base64_encoded=false&fields=*`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
      
      if (!resultResponse.ok) {
        throw new Error(`HTTP error getting results! status: ${resultResponse.status}`);
      }
      
      result = await resultResponse.json();
      status = result.status?.description || "Processing";
      console.log("Judge0 status:", result.status);
    }
    if (result.status?.id === 13) { 
      return {
        error: "File size limit exceeded. The output generated by your program is too large."
      };
    }
    const formattedResponse = {
      language: requestData.language,
      run: {
        stdout: result.stdout || "",
        stderr: result.stderr || "",
        output: result.stdout || result.stderr || "",
        code: result.status?.id === 3 ? 0 : (result.status?.id || 1),
        signal: null
      },
      compile: result.compile_output ? {
        stdout: "",
        stderr: result.compile_output,
        output: result.compile_output,
        code: result.status?.id === 3 ? 0 : 1,
        signal: null
      } : null
    };
    
    console.log("Judge0 Response:", formattedResponse);
    console.log("Judge0 Status ID:", result.status?.id, "Description:", result.status?.description);
    return formattedResponse;
  } catch (error) {
    console.error("Error:", error);
    if (error.message.includes("NetworkError") || error.message.includes("failed")) {
      return { 
        error: "Network error occurred. This could be due to the code or input being too large."
      };
    }
    
    return { error: error.message };
  }
}

/**
  @param {string} language
  @returns {number} 
 */
function getLanguageId(language) {
  const languageMap = {
    "javascript": 63,  
    "typescript": 74, 
    "python": 71,      
    "java": 62,        
    "c": 50,           
    "cpp": 54,         
    "ruby": 72,        
    "go": 60,          
    "rust": 73,        
    "scala": 81,         
    "csharp": 51,      
    "kotlin": 78,      
    "swift": 83,      
  };
  
  return languageMap[language.toLowerCase()] || 63; 
} 